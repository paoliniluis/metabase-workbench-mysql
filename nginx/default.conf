server {
    listen 80;
    listen [::]:80;
    listen 443 ssl;
    listen [::]:443 ssl;
    http2 on;

    server_name localhost;
    ssl_certificate /etc/nginx/conf.d/certs/nginx-selfsigned.crt;
    ssl_certificate_key /etc/nginx/conf.d/certs/nginx-selfsigned.key;

    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_early_data on;

    # server_name your.domain.com;
    # if ($scheme != "https") {
    #     return 301 https://$host$request_uri;
    # }
    # }

    location @internal {
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass_header Server;
        # proxy_set_header Early-Data $ssl_early_data;
        proxy_connect_timeout 600s; 
        proxy_read_timeout 600s;
        proxy_send_timeout 600s;

        proxy_pass http://metabase;
        proxy_http_version 1.1;
        
        otel_trace         on;
        otel_trace_context propagate;
        otel_span_name     $request_method-$uri;
        
        # Custom docs
        # sub_filter 'https://www.internal.com/help-premium' 'https://www.google.com';
        # sub_filter_types text/html text/javascript;
        
        # Hide custom sections
        # sub_filter '.SetupHelp' 'span:has(> button) { display: none} .SetupHelp';
        # sub_filter '.SetupCompleted' 'ul:has(> div > div > h4) { display: none} .setupCompleted';
        # sub_filter_types text/css;
        # sub_filter_once off;
    }

    location / {
        try_files $uri @internal;
    }

    location ~* \.map$ {
        return 404;
    }

    location /status {
        stub_status;
    }

}